name: CI/CD Pipeline - Backstage

on:
  push:
    branches:
      - main
    paths:
      - 'backstage/**'
      - 'charts/**'
      - '.github/workflows/ci-cd.yaml'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set_tag.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Docker image tag
        id: set_tag
        run: |
          echo "image-tag=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backstage
          yarn install --frozen-lockfile

      - name: Build Backstage
        run: |
          cd backstage
          yarn build:all

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backstage
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.set_tag.outputs.image-tag }}
            ${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64

  deploy-to-kind:
    name: Deploy to Kind Cluster (via ArgoCD)
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
    steps:
      - name: Print ARGOCD_SERVER value
        run: echo "ARGOCD_SERVER='$ARGOCD_SERVER'"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up yq
        uses: mikefarah/yq@v4.30.6
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
      - name: Update ArgoCD Application manifest with new image tag
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          ARGO_APP_FILE="argocd/apps/backstage-application.yaml"
          echo "🔄 Updating ArgoCD application with image tag: $IMAGE_TAG"
          yq e '.spec.source.helm.parameters[] |= select(.name == "image.tag").value = "'"$IMAGE_TAG"'"' -i "$ARGO_APP_FILE"
          yq e '.metadata.annotations["backstage.io/last-deployed"] = "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"' -i "$ARGO_APP_FILE"
          echo "✅ Updated $ARGO_APP_FILE with image.tag=$IMAGE_TAG"
          echo "📝 Changes made:"
          git diff argocd/apps/backstage-application.yaml || echo "No changes detected"
          git add argocd/apps/backstage-application.yaml
          git commit -m "chore(argocd): Update Backstage image tag to $IMAGE_TAG" || echo "No changes to commit"
          echo "🚀 Pushing changes to trigger ArgoCD sync..."
          for i in {1..3}; do
            if git push origin HEAD:${{ github.ref_name }}; then
              echo "✅ Successfully triggered ArgoCD sync with new image tag"
              break
            else
              echo "❌ Push attempt $i failed, retrying..."
              sleep 5
              git pull --rebase origin ${{ github.ref_name }} || true
            fi
          done
      - name: Force ArgoCD Sync
        run: |
          echo "🚀 Forcing ArgoCD sync for backstage application..."
          ARGOCD_BIN=/tmp/argocd
          echo "ArgoCD Server: $ARGOCD_SERVER"
          if ! command -v $ARGOCD_BIN &> /dev/null; then
            echo "Installing argocd CLI..."
            curl -sSL -o $ARGOCD_BIN https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x $ARGOCD_BIN
          fi
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "ERROR: ARGOCD_SERVER is not set."
            exit 1
          fi
          $ARGOCD_BIN login "$ARGOCD_SERVER" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure
          $ARGOCD_BIN app sync backstage --server "$ARGOCD_SERVER"
      - name: Check Kubernetes Deployment Image Tag
        run: |
          echo "🔎 Checking deployed image tag in Kubernetes..."
          kubectl get deployment backstage -n backstage -o=jsonpath='{.spec.template.spec.containers[0].image}'
          echo "Expected image: $DOCKER_IMAGE:${{ needs.build-and-push.outputs.image-tag }}"


  update-helm-chart:
    name: Update Helm Chart and Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Update Helm chart image tag
        run: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          echo "🔄 Updating Helm chart with image tag: $IMAGE_TAG"
          sed -i "s/tag: .*/tag: \"$IMAGE_TAG\"/" charts/backstage/values.yaml
          sed -i "s/repository: .*/repository: ${{ env.IMAGE_NAME }}/" charts/backstage/values.yaml
          echo "✅ Updated charts/backstage/values.yaml"

      - name: Commit and push changes
        run: |
          git add charts/backstage/values.yaml
          git commit -m "chore: Update Backstage image tag to ${{ needs.build-and-push.outputs.image-tag }}" || echo "No changes to commit"
          echo "🚀 Pushing changes to trigger ArgoCD sync..."
          git push origin HEAD:main



  deployment-summary:
    name: Deployment Summary
    needs: [build-and-push, update-helm-chart]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Status Summary
        run: |
          echo "=========================================="
          echo "🚀 CI/CD Pipeline Summary"
          echo "=========================================="
          echo ""
          echo "📦 Image: ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
          echo "🔗 ArgoCD Application: backstage"
          echo ""
          echo "✅ Build & Push: ${{ needs.build-and-push.result == 'success' && 'SUCCESS' || 'FAILED' }}"
          echo "✅ Chart Update: ${{ needs.update-helm-chart.result == 'success' && 'SUCCESS' || 'FAILED' }}"
          echo ""
          echo "🔄 ArgoCD should automatically sync the new image"
          echo ""
          echo "=========================================="
